<html xmlns:jsp="http://java.sun.com/JSP/Page" xmlns:c="http://java.sun.com/jsp/jstl/core" xmlns:tiles="http://tiles.apache.org/tags-tiles" xmlns:spring="http://www.springframework.org/tags" xmlns:util="urn:jsptagdir:/WEB-INF/tags/util">
<div id="whole">
	<jsp:output doctype-root-element="HTML" doctype-system="about:legacy-compat" />
	<jsp:directive.page contentType="text/html;charset=UTF-8" />
	<jsp:directive.page pageEncoding="UTF-8" />
	<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta http-equiv="X-UA-Compatible" content="IE=8" />
<util:load-scripts />
<spring:message code="application_name" var="app_name" htmlEscape="false" />
<title><spring:message code="welcome_h3" arguments="${app_name}" /></title>
	</head>
	<spring:url value="/users/fblogin/" var="fb_login" />
	<body class="tundra spring">

		<!-- 		<div id="fb-root"></div> -->
	<!-- 	<svg version="1.1" xmlns="http://www.w3.org/2000/svg" height="0" width="0">
  <defs>
     <filter id="blur" x="0" y="0">
       <feGaussianBlur stdDeviation="3" />
     </filter>
  </defs>
</svg> -->
		<script>
			var fb_login = '${fb_login}';
			window.fbAsyncInit = function() {
				FB.init({
					appId : '469489869845516',
					status : true, // check login status
					cookie : true, // enable cookies to allow the server to access the session
					xfbml : true
				// parse XFBML
				});

				// Here we subscribe to the auth.authResponseChange JavaScript event. This event is fired
				// for any authentication related change, such as login, logout or session refresh. This means that
				// whenever someone who was previously logged out tries to log in again, the correct case below 
				// will be handled. 
				FB.Event.subscribe('auth.authResponseChange',
						function(response) {
							// Here we specify what we do with the response anytime this event occurs. 
							if (response.status === 'connected') {
								// The response object is returned with a status field that lets the app know the current
								// login status of the person. In this case, we're handling the situation where they 
								// have logged in to the app.
								testAPI(fb_login);
							} else if (response.status === 'not_authorized') {
								// In this case, the person is logged into Facebook, but not into the app, so we call
								// FB.login() to prompt them to do so. 
								// In real-life usage, you wouldn't want to immediately prompt someone to login 
								// like this, for two reasons:
								// (1) JavaScript created popup windows are blocked by most browsers unless they 
								// result from direct interaction from people using the app (such as a mouse click)
								// (2) it is a bad experience to be continually prompted to login upon page load.
								FB.login();
							} else {
								// In this case, the person is not logged into Facebook, so we call the login() 
								// function to prompt them to do so. Note that at this stage there is no indication
								// of whether they are logged into the app. If they aren't then they'll see the Login
								// dialog right after they log in to Facebook. 
								// The same caveats as above apply to the FB.login() call here.
								FB.login();
							}
						});
			};

			// Load the SDK asynchronously
			(function(d) {
				var js, id = 'facebook-jssdk', ref = d
						.getElementsByTagName('script')[0];
				if (d.getElementById(id)) {
					return;
				}
				js = d.createElement('script');
				js.id = id;
				js.async = true;
				js.src = "//connect.facebook.net/en_US/all.js";
				ref.parentNode.insertBefore(js, ref);
			}(document));

			// Here we run a very simple test of the Graph API after login is successful. 
			// This testAPI() function is only called in those cases. 
			function testAPI(reqURL) {
				console.log('Welcome!  Fetching your information.... ');
				FB.api('/me', function(response) {
					console.log('Good to see you, ' + response.email + '.');
					reqURL = reqURL + response.email;
					/* 	$.ajax({
							url : reqURL,
							type : 'GET',
							success : function(html) {
								//change this again...
								$("#content").append(html); // This will be the div where our content will be loaded
							}
						});
						//create user. */
					window.location.href = reqURL;
				});
			};
		</script>

		<tiles:insertAttribute name="menuBar-before-login" ignore="true" />
		<div id="wrapper" class="what_body">
			<tiles:insertAttribute name="menu" ignore="true" />
			<div id="main">
				<tiles:insertAttribute name="body" />
			</div>
		</div>
	</body>
</div>
</html>
<!-- 		<tiles:insertAttribute name="categoryBar" ignore="true" /> -->
<!-- 		<tiles:insertAttribute name="footer" ignore="true" /> -->